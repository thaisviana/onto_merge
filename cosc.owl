<?xml version="1.0"?>
<rdf:RDF
    xmlns:dol="http://www.loa-cnr.it/ontologies/DOLCE-Lite#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:pla="http://www.loa-cnr.it/ontologies/Plans#"
    xmlns:fpar="http://www.loa-cnr.it/ontologies/FunctionalParticipation#"
    xmlns="http://cos.ontoware.org/cosc#"
    xmlns:tem="http://www.loa-cnr.it/ontologies/TemporalRelations#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:cso="http://cos.ontoware.org/cso#"
    xmlns:edns="http://www.loa-cnr.it/ontologies/ExtendedDnS#"
    xmlns:daml="http://www.daml.org/2001/03/daml+oil#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
  xml:base="http://cos.ontoware.org/cosc">
  <owl:Ontology rdf:about="">
    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >      The Core Ontology of Software Components v1.1 29/8/2005 - edited by Daniel Oberle</owl:versionInfo>
    <!-- <owl:imports rdf:resource="file:///D:/Dev/cos/cso.owl"/> -->
    <owl:imports rdf:resource="http://cos.ontoware.org/cso"/>
  </owl:Ontology>
  <owl:Class rdf:ID="profile">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >We define a Profile as follows: First, it aggregates CSO:PolicyDescriptions, an OoP:Plan, the required SoftwareLibraries, the implemented Interfaces and additional Characteristics of a specific Software entity. Second, the link to the described Software is specified via the describes association. We specialize this definition to ComponentProfile and ServiceProfiles.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#information-object"/>
    <owl:equivalentClass>
      <owl:Class>
        <owl:intersectionOf rdf:parseType="Collection">
          <owl:Restriction>
            <owl:allValuesFrom>
              <owl:Class>
                <owl:unionOf rdf:parseType="Collection">
                  <rdf:Description rdf:about="http://cos.ontoware.org/cso#policy-description"/>
                  <owl:Class rdf:ID="software-library"/>
                  <rdf:Description rdf:about="http://cos.ontoware.org/cso#interface"/>
                  <rdf:Description rdf:about="http://www.loa-cnr.it/ontologies/ExtendedDnS#plan"/>
                  <owl:Class rdf:ID="characteristic"/>
                </owl:unionOf>
              </owl:Class>
            </owl:allValuesFrom>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="profiles"/>
            </owl:onProperty>
          </owl:Restriction>
          <owl:Restriction>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="describes"/>
            </owl:onProperty>
            <owl:allValuesFrom rdf:resource="http://cos.ontoware.org/cso#software"/>
          </owl:Restriction>
        </owl:intersectionOf>
      </owl:Class>
    </owl:equivalentClass>
  </owl:Class>
  <owl:Class rdf:about="#characteristic">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > Often, we need to express certain capabilities or
features of components, such as the version, transactional or
security settings. For this purpose, we introduce Characteristics
on a ComponentProfile. It is expected that ComponentProfiles are
specialized and put into a taxonomy. For example, we might define
a DatabaseConnectorProfile as a ComponentProfile that provides for
specific Characteristics} describing whether the underlying
database provides transactions or SQL-99 support. A taxonomic
structure further accommodates the developer in browsing and
querying for ComponentProfiles in his system.</rdfs:comment>
    <owl:equivalentClass>
      <owl:Class>
        <owl:intersectionOf rdf:parseType="Collection">
          <owl:Restriction>
            <owl:allValuesFrom rdf:resource="#profile"/>
            <owl:onProperty rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#defined-by"/>
          </owl:Restriction>
          <owl:Restriction>
            <owl:allValuesFrom rdf:resource="http://www.loa-cnr.it/ontologies/DOLCE-Lite#abstract-region"/>
            <owl:onProperty rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#valued-by"/>
          </owl:Restriction>
        </owl:intersectionOf>
      </owl:Class>
    </owl:equivalentClass>
    <rdfs:subClassOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#parameter"/>
  </owl:Class>
  <owl:Class rdf:ID="license">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > The concept of a License is a special kind of
LegalContract as introduced in the Core Legal Ontology. We here
just subclass it to Description as we do not include the Core
Legal Ontology. Descriptions is the superclass of LegalContract.</rdfs:comment>
    <owl:equivalentClass>
      <owl:Restriction>
        <owl:someValuesFrom rdf:resource="http://cos.ontoware.org/cso#software"/>
        <owl:onProperty rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#involves"/>
      </owl:Restriction>
    </owl:equivalentClass>
    <rdfs:subClassOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#description"/>
  </owl:Class>
  <owl:Class rdf:about="#software-library">
    <owl:equivalentClass>
      <owl:Restriction>
        <owl:onProperty rdf:resource="http://www.loa-cnr.it/ontologies/DOLCE-Lite#proper-part"/>
        <owl:allValuesFrom rdf:resource="http://cos.ontoware.org/cso#class"/>
      </owl:Restriction>
    </owl:equivalentClass>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > A SoftwareLibrary consists of a number of
CSO:Classes and is classified as CSO:Data because it cannot be
executed as a whole</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://cos.ontoware.org/cso#data"/>
  </owl:Class>
  <owl:Class rdf:ID="component-profile">
    <rdfs:subClassOf rdf:resource="#profile"/>
    <owl:equivalentClass>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#describes"/>
        </owl:onProperty>
        <owl:allValuesFrom>
          <owl:Class rdf:ID="software-component"/>
        </owl:allValuesFrom>
      </owl:Restriction>
    </owl:equivalentClass>
  </owl:Class>
  <owl:Class rdf:about="#software-component">
    <rdfs:subClassOf rdf:resource="http://cos.ontoware.org/cso#class"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > Assuming the object-oriented paradigm we state
that a SoftwareComponent is a special kind of CSO:Class and that
it conforms to a FrameworkSpecification. According to the
reference version of this ontology, a FrameworkSpecification is
(i) a DOLCE:Collection of CSO:Interfaces and (ii) a special kind
of OoP:Plan which specifies the interaction of components.
Conformance means that every CSO:Interface prescribed by the
FrameworkSpecification has to be implemented by the
SoftwareComponent.
</rdfs:comment>
  </owl:Class>
  <owl:ObjectProperty rdf:ID="library-conflicts-with">
    <rdfs:domain rdf:resource="#software-library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#SymmetricProperty"/>
    <rdfs:range rdf:resource="#software-library"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > Very often there are
dependencies between libraries that are revealed only during run
time by ClassNotFoundExceptions. For example, a library lib1.jar
might depend on lib2.jar which in turn depends on lib3.jar and so
forth. It is a very tedious task to keep track of such
dependencies and, additionally, to check whether there are
conflicts between libraries in this dependency graph. In order to
reason with such information, we introduce the following
associations and axioms: First, the transitive libraryDependsOn.
Second the symmetric libraryConflictsWith.</rdfs:comment>
    <owl:inverseOf rdf:resource="#library-conflicts-with"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#profiles">
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#defines"/>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#unifies"/>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#expressed-by"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The profiles association is as a catch-all for
DnS:defines, DnS:unifies, OIO:about, as well as OIO:expressedBy.
This is done for convenience in order to relieve the developer,
who will certainly have to deal with such information, from such
modelling details when modelling the parts of a ComponentProfile.</rdfs:comment>
    <owl:inverseOf>
      <owl:ObjectProperty rdf:ID="profiled-by"/>
    </owl:inverseOf>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#about"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:ID="license-of">
    <rdfs:domain rdf:resource="#license"/>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#expressed-by"/>
    <owl:inverseOf>
      <owl:ObjectProperty rdf:ID="released-under"/>
    </owl:inverseOf>
    <rdfs:range rdf:resource="#software-library"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#describes">
    <rdfs:range rdf:resource="http://cos.ontoware.org/cso#software"/>
    <rdfs:domain rdf:resource="#profile"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >a ComponentProfile is defined as
follows: First, it aggregates CSO:PolicyDescriptions, an OoP:Plan,
the required SoftwareLibraries, the implemented Interfaces and
additional Characteristics of a SoftwareComponent. Second, the
link to the described SoftwareComponent is specified via the
describes association</rdfs:comment>
    <owl:inverseOf>
      <owl:ObjectProperty rdf:ID="described-by"/>
    </owl:inverseOf>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#about"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:ID="library-dependent">
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/DOLCE-Lite#specific-constant-dependent"/>
    <rdfs:domain rdf:resource="#software-library"/>
    <rdfs:range rdf:resource="#software-library"/>
    <owl:inverseOf>
      <owl:TransitiveProperty rdf:ID="library-dependens-on"/>
    </owl:inverseOf>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#profiled-by">
    <owl:inverseOf rdf:resource="#profiles"/>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#aboutness-of"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#released-under">
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#expresses"/>
    <rdfs:range rdf:resource="#license"/>
    <owl:inverseOf rdf:resource="#license-of"/>
    <rdfs:domain rdf:resource="#software-library"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > Very often there are
dependencies between libraries that are revealed only during run
time by ClassNotFoundExceptions. For example, a library lib1.jar
might depend on lib2.jar which in turn depends on lib3.jar and so
forth. It is a very tedious task to keep track of such
dependencies and, additionally, to check whether there are
conflicts between libraries in this dependency graph. In order to
reason with such information, we introduce the following
associations and axioms: First, the transitive libraryDependsOn.
Second the symmetric libraryConflictsWith.</rdfs:comment>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#described-by">
    <rdfs:domain rdf:resource="http://cos.ontoware.org/cso#software"/>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/ExtendedDnS#aboutness-of"/>
    <rdfs:range rdf:resource="#profile"/>
    <owl:inverseOf rdf:resource="#describes"/>
  </owl:ObjectProperty>
  <owl:TransitiveProperty rdf:about="#library-dependens-on">
    <owl:inverseOf rdf:resource="#library-dependent"/>
    <rdfs:domain rdf:resource="#software-library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
    <rdfs:range rdf:resource="#software-library"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > Very often there are
dependencies between libraries that are revealed only during run
time by ClassNotFoundExceptions. For example, a library lib1.jar
might depend on lib2.jar which in turn depends on lib3.jar and so
forth. It is a very tedious task to keep track of such
dependencies and, additionally, to check whether there are
conflicts between libraries in this dependency graph. In order to
reason with such information, we introduce the following
associations and axioms: First, the transitive libraryDependsOn.
Second the symmetric libraryConflictsWith.</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="http://www.loa-cnr.it/ontologies/DOLCE-Lite#specifically-constantly-dependent-on"/>
  </owl:TransitiveProperty>
  <owl:SymmetricProperty rdf:ID="license-incompatible-with">
    <rdfs:range rdf:resource="#license"/>
    <rdfs:domain rdf:resource="#license"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    > Very often there are
dependencies between libraries that are revealed only during run
time by ClassNotFoundExceptions. For example, a library lib1.jar
might depend on lib2.jar which in turn depends on lib3.jar and so
forth. It is a very tedious task to keep track of such
dependencies and, additionally, to check whether there are
conflicts between libraries in this dependency graph. In order to
reason with such information, we introduce the following
associations and axioms: First, the transitive libraryDependsOn.
Second the symmetric libraryConflictsWith.
</rdfs:comment>
    <owl:inverseOf rdf:resource="#license-incompatible-with"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:SymmetricProperty>
</rdf:RDF>

<!-- Created with Protege (with OWL Plugin 2.1, Build 284)  http://protege.stanford.edu -->
